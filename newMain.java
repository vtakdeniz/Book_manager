/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookmanager;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author medit
 */
public class newMain extends javax.swing.JFrame {

    /**
     * Creates new form record
     */
    DefaultTableModel dtm = new DefaultTableModel();
    DefaultListModel dlm = new DefaultListModel();

    public newMain() {
        initComponents();
        dtm.setColumnIdentifiers(new Object[]{"Book id", "Name", "Writer", "Publisher", "Type", "Issue", "Topic", "Shelf", "Shelf no", "Kind", "Page"});
        table.setModel(dtm);
        setTable();
        list.setModel(dlm);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        search = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        cprimary = new javax.swing.JCheckBox();
        csecondary = new javax.swing.JCheckBox();
        cmagazine = new javax.swing.JCheckBox();
        creading = new javax.swing.JCheckBox();
        cstudy = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        normal = new javax.swing.JButton();
        write = new javax.swing.JButton();
        backup = new javax.swing.JButton();
        revert = new javax.swing.JButton();
        change = new javax.swing.JButton();
        tpage = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableFocusGained(evt);
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tablePropertyChange(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel1.setText("Filter By :");

        list.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(list);

        jLabel2.setText("Details of chosen  book :");

        add.setText("Add another book");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel3.setText("-Name :");

        cprimary.setText("Primary Shelf");

        csecondary.setText("Secondary Shelf");

        cmagazine.setText("Magazine");

        creading.setText("Reading");

        cstudy.setText("Study");

        jLabel4.setText("- By shelf :");

        jLabel5.setText("- By Kind:");

        normal.setText("Refresh to normal state");
        normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalActionPerformed(evt);
            }
        });

        write.setText("Write everything to a file");
        write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeActionPerformed(evt);
            }
        });

        backup.setText("Manuel Database Backup");
        backup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupActionPerformed(evt);
            }
        });

        revert.setText("Revert from backup");
        revert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertActionPerformed(evt);
            }
        });

        change.setText("Change Page");
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });

        tpage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tpageKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(write))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(8, 8, 8))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(18, 18, 18))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cprimary)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(csecondary))
                                    .addComponent(searchText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cstudy)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(normal)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(creading)
                                                .addGap(29, 29, 29)
                                                .addComponent(cmagazine))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(search)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(change)
                                .addGap(18, 18, 18)
                                .addComponent(remove))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(backup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(revert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tpage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jLabel2)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tpage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(normal)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(remove)
                                        .addComponent(search)
                                        .addComponent(change))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(add)
                                    .addComponent(write)
                                    .addComponent(backup))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(revert))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(cprimary)
                                    .addComponent(csecondary))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(cstudy)
                                    .addComponent(creading)
                                    .addComponent(cmagazine))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        records r = new records();
        r.setVisible(true);
    }//GEN-LAST:event_addActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        ArrayList<record> recs = new ArrayList<>();
        boolean isMain = cprimary.isSelected();
        boolean isSecond = csecondary.isSelected();
        if (!searchText.getText().equals("")) {
            String name = searchText.getText();
            if (!cprimary.isSelected() && !csecondary.isSelected()) {
                isMain = true;
                isSecond = true;
            }
            if (cstudy.isSelected() || (!cstudy.isSelected() && !creading.isSelected() && !cmagazine.isSelected())) {
                study.getSelf(name, recs, isMain, isSecond);
            }
            if (creading.isSelected() || (!cstudy.isSelected() && !creading.isSelected() && !cmagazine.isSelected())) {
                reading.getSelf(name, recs, isMain, isSecond);
            }
            if (cmagazine.isSelected() || (!cstudy.isSelected() && !creading.isSelected() && !cmagazine.isSelected())) {
                magazine.getSelf(name, recs, isMain, isSecond);
            }

            setTable(recs);
        } else {
            String name = searchText.getText();
            if (!cprimary.isSelected() && !csecondary.isSelected()) {
                isMain = true;
                isSecond = true;
            }
            if (cstudy.isSelected() || (!cstudy.isSelected() && !creading.isSelected() && !cmagazine.isSelected())) {
                study.getSelf(recs, isMain, isSecond);
            }
            if (creading.isSelected() || (!cstudy.isSelected() && !creading.isSelected() && !cmagazine.isSelected())) {
                reading.getSelf(recs, isMain, isSecond);
            }
            if (cmagazine.isSelected() || (!cstudy.isSelected() && !creading.isSelected() && !cmagazine.isSelected())) {
                magazine.getSelf(recs, isMain, isSecond);
            }

            setTable(recs);
        }

    }//GEN-LAST:event_searchActionPerformed

    private void normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalActionPerformed
        setTable();

    }//GEN-LAST:event_normalActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        int row = table.getSelectedRow();

        if (row == -1) {
            JOptionPane.showMessageDialog(rootPane, "Please select a row", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            Connection con;
            try {
                con = DriverManager.getConnection("jdbc:derby://localhost:1527/sample", "app", "app");
                int id = -1;
                record r = (record) dtm.getValueAt(table.getSelectedRow(), 1);
                id = r.getId();
                dtm.removeRow(table.getSelectedRow());
                Statement recs = con.createStatement();
                recs.executeUpdate("delete from reading where id = " + id + "");
                Statement recs2 = con.createStatement();
                recs2.executeUpdate("delete from magazine where id = " + id + "");
                Statement recs3 = con.createStatement();
                recs3.executeUpdate("delete from study where id = " + id + "");

                Statement mainDelete = con.createStatement();
                mainDelete.executeUpdate("delete from mainshelf where book_id = " + id + "");

                Statement auxDelete = con.createStatement();
                auxDelete.executeUpdate("delete from auxshelf where book_id = " + id + "");

            } catch (SQLException ex) {
                Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_removeActionPerformed

    private void writeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeActionPerformed

        try {
            String path = "./Records.txt";
            PrintWriter writer = new PrintWriter(path);

            ArrayList<record> recs = new ArrayList<>();
            study.getSelf(recs, true, true);
            reading.getSelf(recs, true, true);
            magazine.getSelf(recs, true, true);
            for (record rc : recs) {
                writer.print("------------\n");
                writer.print(rc.getInfo());
                writer.print("------------\n");
                writer.print("\n");
            }

            writer.flush();
            JOptionPane.showMessageDialog(rootPane, "Everything has been written to a file named Records.txt", "Process Completed", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_writeActionPerformed

    private void tablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tablePropertyChange

    }//GEN-LAST:event_tablePropertyChange

    private void tableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusGained

    }//GEN-LAST:event_tableFocusGained

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed

    }//GEN-LAST:event_tableKeyPressed

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        dlm.removeAllElements();
        record r = (record) dtm.getValueAt(table.getSelectedRow(), 1);
        String s = r.getInfo();
        String[] all = s.split("/");
        for (String string : all) {
            dlm.addElement(string);
        }
    }//GEN-LAST:event_tableMousePressed

    private void backupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupActionPerformed
        setBackup();
        JOptionPane.showMessageDialog(rootPane, "Database has been backed up succesfully", "Process Completed", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_backupActionPerformed

    private void revertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertActionPerformed

        int i = JOptionPane.showConfirmDialog(rootPane, "This action will delete all \nrecords in the current database before \nreverting to prevent duplicate records. \n\nChoose yes only if you are sure\ndatabase is backed up", "Are you sure?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (i == 0) {
            ObjectInputStream ois = null;
            try {
                Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/sample", "app", "app");
                Statement trrd = con.createStatement();
                trrd.executeUpdate("truncate table reading");

                Statement trmg = con.createStatement();
                trmg.executeUpdate("truncate table magazine");

                Statement trst = con.createStatement();
                trst.executeUpdate("truncate table study");

                Statement trpr = con.createStatement();
                trpr.executeUpdate("truncate table mainshelf");

                Statement trsc = con.createStatement();
                trsc.executeUpdate("truncate table auxshelf");

                String datrec = "./BackupRec.dat";
                ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(datrec)));
                ArrayList<record> datrecords = (ArrayList<record>) ois.readObject();
                for (record recs : datrecords) {
                    recs.addSelf();
                }

                String datmain = "./BackupM.dat";
                ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(datmain)));
                ArrayList<mainshelf> datmainrecords = (ArrayList<mainshelf>) ois.readObject();
                for (mainshelf recs : datmainrecords) {
                    recs.addSelf();
                }
                String dataux = "./BackupA.dat";
                ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(dataux)));
                ArrayList<auxshelf> datauxrecords = (ArrayList<auxshelf>) ois.readObject();
                for (auxshelf recs : datauxrecords) {
                    recs.addSelf();
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_revertActionPerformed

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
        try {
            int row = table.getSelectedRow();

            if (row == -1) {
                JOptionPane.showMessageDialog(rootPane, "Please select a row", "Error", JOptionPane.WARNING_MESSAGE);
            } else {
                if (!dtm.getValueAt(table.getSelectedRow(), 9).toString().equals("Magazine")) {
                    book r = (book) dtm.getValueAt(table.getSelectedRow(), 1);
                    r.changePage(Integer.parseInt(tpage.getText()));
                } else {
                    JOptionPane.showMessageDialog(rootPane, "You cannot change the page for magazines", "Error", JOptionPane.WARNING_MESSAGE);

                }

            }
            setTable();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Please enter a number", "Error", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_changeActionPerformed

    private void tpageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpageKeyReleased
        char[] a = tpage.getText().toCharArray();
        int sayac = 0;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < a.length; i++) {
            if (Character.isLetter(a[i])) {

                if (sayac == 0) {
                    sayac++;
                    JOptionPane.showMessageDialog(rootPane, "Page field cannot take a character", "Error", JOptionPane.WARNING_MESSAGE);

                }

            } else {
                sb.append(a[i]);
            }
            tpage.setText(String.valueOf(sb));
        }
    }//GEN-LAST:event_tpageKeyReleased

    public static void setBackup() {
        ObjectOutputStream oos = null;
        ObjectOutputStream oos1 = null;
        ObjectOutputStream oos2 = null;
        try {
            String datrecords = "./BackupRec.dat";
            oos = new ObjectOutputStream(
                    new BufferedOutputStream(
                            new FileOutputStream(datrecords)));
            ArrayList<record> recs = new ArrayList<>();
            study.getSelf(recs, true, true);
            reading.getSelf(recs, true, true);
            magazine.getSelf(recs, true, true);
            oos.writeObject(recs);
            oos.flush();
            oos.close();

            ArrayList<mainshelf> mrecs = new ArrayList<>();
            String datmshelf = "./BackupM.dat";
            oos1 = new ObjectOutputStream(
                    new BufferedOutputStream(
                            new FileOutputStream(datmshelf)));
            mainshelf.getSelf(mrecs);
            oos1.writeObject(mrecs);
            oos1.flush();
            oos1.close();

            ArrayList<auxshelf> arecs = new ArrayList<>();
            String datsshelf = "./BackupA.dat";
            oos2 = new ObjectOutputStream(
                    new BufferedOutputStream(
                            new FileOutputStream(datsshelf)));
            auxshelf.getSelfA(arecs);
            oos2.writeObject(arecs);
            oos2.flush();
            oos2.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                oos.close();
            } catch (IOException ex) {
                Logger.getLogger(newMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void setTable() {
        dtm.setRowCount(0);
        ArrayList<record> recs = new ArrayList<>();
        study.getSelf(recs, true, true);
        reading.getSelf(recs, true, true);
        magazine.getSelf(recs, true, true);
        for (record rc : recs) {
            dtm.addRow(rc.returnVarMain(rc.getShelfNo()));
        }
    }

    public void setTable(ArrayList<record> rcs) {
        dtm.setRowCount(0);
        for (record rc : rcs) {
            dtm.addRow(rc.returnVarMain(rc.getShelfNo()));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                newMain m = new newMain();
                m.setVisible(true);
                m.addWindowListener(new WindowAdapter() {
                    public void windowClosing(WindowEvent e) {
                        setBackup();
                        e.getWindow().dispose();
                    }
                });
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton backup;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton change;
    private javax.swing.JCheckBox cmagazine;
    private javax.swing.JCheckBox cprimary;
    private javax.swing.JCheckBox creading;
    private javax.swing.JCheckBox csecondary;
    private javax.swing.JCheckBox cstudy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> list;
    private javax.swing.JButton normal;
    private javax.swing.JButton remove;
    private javax.swing.JButton revert;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchText;
    private javax.swing.JTable table;
    private javax.swing.JTextField tpage;
    private javax.swing.JButton write;
    // End of variables declaration//GEN-END:variables
}
